default:
  tags:
    - bigdata
    - dmz
    - docker

stages:
  - build test image
  - static analysis
  - tests
  - coverage
  - artifacts

include:
  - project: DevOps/cicd-store/gitlabci/docker
    ref: v8
    file:
      - .base_docker_build.yml
      - .base_docker_cleaner.yml

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never

    - if: $CI_COMMIT_BRANCH =~ /^(master|main)$/
      when: never

    - when: always

.build_test_image:
  extends: .base_docker_build
  stage: build test image
  variables:
    CICD_DOCKER__IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    CICD_DOCKER__STOP_IF_EXISTS: 'false'
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

backend_test_image:
  extends: .build_test_image
  variables:
    CICD_DOCKER__FILE_PATH: ./docker/Dockerfile.backend
    CICD_DOCKER__IMAGE_NAME: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend
    CICD_DOCKER__CACHE_FROM: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend:develop
    CICD_DOCKER__BUILD_EXTRA_ARGS: --target test

mypy:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
    - python -m mypy ./horizon/app --config-file ./pyproject.toml
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

flake8:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
    - python -m flake8 --max-line-length 120 --format=default ./horizon/app 2>&1 | tee flake8.txt
  artifacts:
    when: always
    paths: [flake8.txt]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

black:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
    - python -m black ./horizon/app --check
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

bandit:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend:${CI_COMMIT_REF_SLUG}
  stage: static analysis
  script:
    - python -m bandit -ll -iii -r ./horizon/app -f json -o ./bandit.json
  artifacts:
    when: always
    paths: [./bandit.json]
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

tests:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend:${CI_COMMIT_REF_SLUG}
  stage: tests
  variables:
    HORIZON_DATABASE__URL: postgresql+asyncpg://horizon:Aeviphai6juo3ooY7iecaivieX5OoMai@db:5432/horizon
    HORIZON_JWT__SECRET_KEY: bae1thahr8Iyaisai0kohvoh1aeg5quu
    HORIZON_SERVER__DEBUG: 'true'
  services:
    - name: central-mirror.services.mts.ru/postgres:15-alpine
      alias: db
      variables:
        POSTGRES_DB: horizon
        POSTGRES_USER: horizon
        POSTGRES_PASSWORD: Aeviphai6juo3ooY7iecaivieX5OoMai
  script:
    - ./docker/wait-for-it.sh -h db -p 5432 -t 60
    - alembic -c ./horizon/alembic.ini upgrade head
    - python -m coverage run -m pytest ./horizon/tests -v -s --junitxml=reports/junit.xml
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/reports
    reports:
      junit:
        - ${CI_PROJECT_DIR}/reports/junit.xml
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

coverage:
  image: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend:${CI_COMMIT_REF_SLUG}
  stage: coverage
  dependencies:
    - tests
  script:
    - python -m coverage combine
    - python -m coverage xml -o ./reports/coverage.xml -i
    - python -m coverage html -d ./reports/coverage.html -i
    - python -m coverage report -i
  coverage: /TOTAL.*?(\d+\.?\d+)?%/
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/reports/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ${CI_PROJECT_DIR}/reports/coverage.xml
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  interruptible: true

build_image_backend:
  extends: .base_docker_build
  stage: artifacts
  variables:
    CICD_DOCKER__FILE_PATH: ./docker/Dockerfile.backend
    CICD_DOCKER__IMAGE_NAME: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/backend
    CICD_DOCKER__IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    CICD_DOCKER__CACHE_FROM: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend:${CI_COMMIT_REF_SLUG}
    CICD_DOCKER__BUILD_EXTRA_ARGS: --target=prod
    CICD_DOCKER__STOP_IF_EXISTS: 'false'
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(dev|develop)$/
      variables:
        CICD_DOCKER__IMAGE_TAG: develop
    - if: $CI_COMMIT_TAG
      variables:
        CICD_DOCKER__CACHE_FROM: ${HARBOR_HOST}/${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend:develop
        CICD_DOCKER__ADDITIONAL_TAGS: latest
        CICD_DOCKER__IMAGE_TAG: ${CI_COMMIT_TAG}
    - when: manual
      allow_failure: true
  interruptible: true

## --------------- Remove artifacts after remove feature/bug branch --------------- ###

start_review_docker:
  stage: .post
  environment:
    name: review/docker/$CI_COMMIT_REF_SLUG
    on_stop: stop_review_docker
  script:
    - echo "Start review"
  rules:
  # environment is used to remove artifacts build in feature/ and bugfix/ branches only
  # dev and release packages are left intact
    - if: $CI_COMMIT_BRANCH =~ /^(dev|develop)$/
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success

stop_review_docker:
  extends: .base_docker_cleaner
  stage: .post
  dependencies: []
  script:
    - !reference [.base_tools__bricks_send_usage_statistics, script]
    - !reference [.base_docker_cleaner__bricks_debug, script]
    - CICD_DOCKER__IMAGE_TAGS=${CI_COMMIT_REF_SLUG}
    - CICD_DOCKER__IMAGE_NAME=${HARBOR_PROJECT}/${CI_PROJECT_PATH}/backend
    - !reference [.base_docker_cleaner__bricks_remove_tags, script]
    - CICD_DOCKER__IMAGE_NAME=${HARBOR_PROJECT}/${CI_PROJECT_PATH}/test/backend
    - !reference [.base_docker_cleaner__bricks_remove_tags, script]
  environment:
    name: review/docker/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
  # environment is used to remove artifacts build in feature/ and bugfix/ branches only
  # dev and release packages are left intact
    - if: $CI_COMMIT_BRANCH =~ /^(dev|develop)$/
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: manual
      allow_failure: true
