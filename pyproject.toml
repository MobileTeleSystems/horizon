[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "data-horizon"
version = "1.1.2"
license = "Apache-2.0"
description = "Horizon REST API + client"
authors = ["DataOps.ETL <onetools@mts.ru>"]
readme = "README.rst"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Framework :: Pydantic :: 2",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
keywords = ["Horizon", "REST", "API", "HWM"]
packages = [
    { include = "horizon" },
]
include = [
    {path = "horizon/py.typed"},
    {path = "horizon/**/*.yml"},
    {path = "horizon/**/*.ini"},
]

[tool.poetry.urls]  # Optional
"Homepage" = "https://github.com/MobileTeleSystems/horizon"
"Documentation" = "https://data-horizon.readthedocs.io/"
"Source" = "https://github.com/MobileTeleSystems/horizon"
"CI/CD" = "https://github.com/MobileTeleSystems/horizon/actions"
"Tracker" = "https://github.com/MobileTeleSystems/horizon/issues"

[tool.poetry.dependencies]
python = "^3.7"
pydantic = [
  {version = "<2.6.0", python = "3.7"},
  {version = "<3", python = ">=3.8"},
]
typing-extensions = [
  {version = ">=4.0.0,<4.8.0", python = "3.7"},
  {version = ">=4.0.0", python = ">=3.8"},
]
packaging = [
  {version = "<=24.0", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
fastapi = [
  {version = "^0.103.2", optional = true, python = "3.7"},
  {version = ">=0.103.0", optional = true, python = ">=3.8"},
]
starlette = [
  {version = "<=0.29.0", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
anyio = [
  {version = "<=3.7.1", optional = true, python = "3.7"},
  {version = "<=4.5.2", optional = true, python = "3.8"},
  {version = "*", optional = true, python = ">=3.9"},
]
starlette-exporter = [
  {version = "<=0.17.1", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
uvicorn = [
  {version = "<=0.22.0", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
pydantic-settings = [
  {version = "<=2.0.3", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
alembic = [
  {version = "<=1.12.1", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
mako = [
  {version = "<=1.2.4", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
markupsafe = [
  {version = "<=2.1.5", optional = true, python = "<=3.7,<3.9"},
  {version = "*", optional = true, python = ">=3.9"},
]
importlib-resources = [
  {version = "<=5.12.0", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
sqlalchemy = {version = ">=2.0", optional = true}
greenlet = {version = ">=3.1.1", optional = true}
asyncpg = [
  {version = "<=0.28.0", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
python-multipart = [
    {version = "<=0.0.8", optional = true, python = "3.7"},
    {version = "*", optional = true, python = ">=3.8"},
]
sqlalchemy-utils = {version = "*", optional = true}
authlib = [
  {version = "<=1.2.1", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
requests = [
  {version = "<=2.31.0", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
urllib3 = {version = ">=1.26.0", optional = true}
bonsai = {version = ">=1.5.3", optional = true}
python-json-logger = {version = "*", optional = true}
coloredlogs = {version = "*", optional = true}
pyyaml = {version = "*", optional = true}
asgi-correlation-id = [
  {version = "<=4.2.0", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
uuid6 = [
  {version = "<=2022.10.25", optional = true, python = "3.7"},
  {version = "*", optional = true, python = ">=3.8"},
]
cffi = [
  {version = "^1.15", optional = true, python = "3.7"},
  {version = ">=1.17", optional = true, python = ">=3.8"},
]
devtools = {version = "*", optional = true}
argon2-cffi = {version = "*", optional = true}
passlib = {version = "*", optional = true}

[tool.poetry.extras]
backend = [
  "packaging",
  "fastapi",
  "starlette",
  "anyio",
  "uvicorn",
  "alembic",
  "mako",
  "markupsafe",
  "importlib-resources",
  "sqlalchemy",
  "greenlet",
  "python-multipart",
  "sqlalchemy-utils",
  "pyyaml",
  "python-json-logger",
  "coloredlogs",
  "starlette-exporter",
  "asgi-correlation-id",
  "uuid6",
  "pydantic-settings",
  "devtools",
  "passlib",
  "authlib",
  "cffi",
]
postgres = [
  "asyncpg",
]
ldap = [
  "bonsai",
  "cffi",
  "argon2-cffi",
]
client-sync = [
  "authlib",
  "cffi",
  "requests",
  "urllib3",
]

[tool.poetry.group.test.dependencies]
pytest = "^7.4.4"
httpx = [
  {version = "^0.24.1", python = "3.7"},
  {version = "^0.28.1", python = ">=3.8"},
]
pytest-asyncio = [
  {version = "^0.21.1", python = "3.7"},
  # TODO: remove version limit after fixing https://github.com/pytest-dev/pytest-asyncio/issues/706
  {version = "^0.21.1", python = ">=3.8"},
]
pytest-randomly = [
  {version = "^3.12.0", python = "3.7"},
  {version = "^3.15.0", python = "3.8"},
  {version = "^3.16.0", python = ">=3.9"},
]
pytest-deadfixtures = "^2.2.1"
pytest-rerunfailures = [
  {version = "^13.0", python = "3.7"},
  {version = "^14.0", python = "3.8"},
  {version = "^15.0", python = ">=3.9"},
]
pytest-lazy-fixture = "^0.6.3"
coverage = [
  {version = "^7.2.7", python = "3.7"},
  {version = "^7.6.1", python = "3.8"},
  {version = "^7.6.9", python = ">=3.9"},
]
psycopg2-binary = [
  {version = "^2.9.9", python = "3.7"},
  {version = "^2.9.10", python = ">=3.8"},
]
gevent = [
  {version = "^22.10.2", python = "3.7"},
  {version = "^24.2.1", python = "3.8"},
  {version = "^24.11.1", python = ">=3.9"},
]
responses = [
  {version = "^0.23.2", python = "3.7"},
  {version = "^0.25.6", python = ">=3.8"},
]
types-pyyaml = [
  {version = "6.0.12.12", python = "3.7"},
  {version = "^6.0.12", python = ">=3.8"},
]

[tool.poetry.group.dev.dependencies]
pre-commit = {version = "^4.1.0", python = ">=3.9"}
mypy = {version = "^1.14.0", python = ">=3.9"}
sqlalchemy = {extras = ["mypy"], version = "^2.0.37", python = ">=3.9"}
types-passlib = {version = "^1.7.7", python = ">=3.9"}
types-pyyaml = {version = "^6.0.12", python = ">=3.9"}
types-requests = {version = "^2.32.0", python = ">=3.9"}
ruff = "^0.11.2"

[tool.poetry.group.docs.dependencies]
autodoc-pydantic = {version = "^2.2.0", python = ">=3.9"}
numpydoc = {version = "^1.8.0", python = ">=3.9"}
sphinx = [
  {version = "^7.4.7", python = "3.9"},
  {version = "^8.1.3", python = ">=3.10"},
]
furo = {version = "^2024.8.6", python = ">=3.9"}
sphinx-copybutton = {version = "^0.5.2", python = ">=3.9"}
sphinxcontrib-towncrier = {version = "^0.5.0a0", python = ">=3.9"}
towncrier = {version = "^24.8.0", python = ">=3.9"}
sphinx-issues = {version = "^5.0.0", python = ">=3.9"}
sphinx-design = {version = "^0.6.1", python = ">=3.9"}
sphinx-favicon = {version = "^1.0.1", python = ">=3.9"}
sphinx-argparse = [
    {version = "^0.4.0", python = ">=3.9,<3.10"},
    {version = "^0.5.2", python = ">=3.10"},
]
# https://github.com/mgeier/sphinx-last-updated-by-git/pull/77
sphinx-last-updated-by-git = {version = "^0.3.8", python = ">=3.9"}
# uncomment after https://github.com/zqmillet/sphinx-plantuml/pull/4
# sphinx-plantuml = {version = "^1.0.0", python = ">=3.9"}

[tool.poetry.plugins."tricoder_package_spy.register"]
"data-horizon" = "horizon"

[tool.poetry_bumpversion.file."horizon/__init__.py"]
search = '_raw_version = "{current_version}"'
replace = '_raw_version = "{new_version}"'

[tool.poetry_bumpversion.file."docs/conf.py"]
search = 'ver = Version.parse("{current_version}")'
replace = 'ver = Version.parse("{new_version}")'

[tool.pytest.ini_options]
markers = [
    "backend: tests for backend (require running database)",
    "client: tests for horizon-client (require running database and backend)",
    "client_sync: tests for HorizonClientSync (using requests)",
    "auth: tests using AuthProvider",
    "dummy_auth: tests for DummyAuthProvider",
    "ldap_auth: tests for LDAPAuthProvider",
]

[tool.coverage.paths]
source = ["horizon"]

[tool.coverage.run]
branch = true
parallel = true
relative_files = true
concurrency = ["gevent"]
omit = [
  "tests/*",
]
data_file = "reports/.coverage"

[tool.coverage.report]
precision = 2
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if .*debug:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if log.isEnabledFor(logging.DEBUG):",
  "if sys.version_info",
  "@(abc\\.)?abstractmethod",
  "\\.\\.\\.",
  "def downgrade\\(\\)",
]
[tool.ruff]
line-length = 120
extend-exclude = ["docs/", "Makefile"]

[tool.ruff.lint]
select = ["ALL"]
# UP035, UP006 - Set -> set, Dict -> dict... ignore for support python verstion before 3.9
# FA100 - Optional[str] -> str | None, doesn't work before 3.10
ignore = ["ARG", "ANN", "D", "COM812", "TD", "FIX002", "UP035", "UP006", "UP007", "FA100"]

[tool.ruff.lint.per-file-ignores]
"horizon/commons/schemas/*" = ["TC"]
"horizon/backend/middlewares/*" = ["TC"]
"horizon/backend/db/repositories/*" = ["TC"]
"horizon/backend/db/migrations/*" = ["INP001", "E501"]
# Using root logger example: logging.info()
"horizon/backend/scripts/manage_admins.py" = ["LOG015"]
"horizon/backend/providers/auth/*" = ["PLR0913"]

"tests/*" = ["S", "A", "PLR0913", "FBT001", "SLF001"]
"tests/*/fixtures/*" = ["INP001"]
"tests/fixtures/*" = ["INP001"]

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "list"
parametrize-values-type = "list"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.codespell]
exclude-file = "poetry.lock"
ignore-words-list = "selectin"

[tool.towncrier]
name = "Horizon"
package = "horizon"
filename = "docs/changelog/NEXT_RELEASE.rst"
directory = "docs/changelog/next_release/"
title_format = "{version} ({project_date})"
issue_format = ":issue:`{issue}`"

[[tool.towncrier.type]]
directory = "breaking"
name = "Breaking Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "significant"
name = "Significant Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features"
showcontent = true

[[tool.towncrier.type]]
directory = "improvement"
name = "Improvements"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bug Fixes"
showcontent = true

[[tool.towncrier.type]]
directory = "dependency"
name = "Dependencies"
showcontent = true

[[tool.towncrier.type]]
directory = "doc"
name = "Doc only Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Misc"
showcontent = true
